[user]
    name        = Marco Farrugia
    email       = afmarco@gmail.com

[url "https://"]
    insteadOf = git://

[core]
    pager = diff-so-fancy | less --tabs=4 -RFX
    fscache = true
    autocrlf = input

[pull]
    rebase = true

# Don't pull tags by default.
[remote "origin"]
    tagOpt = --no-tags

[log]
    abbrevCommit = true
    topoOrder = true

[pretty]
    # Like oneline, but with author, decorate, and relative-date.
    oneline-plus = "%C(yellow)%h%C(auto)%d %C(reset)%C(green)[%aE]%C(white) %s %C(green)(%cr)%C(reset)"

[help]
    autocorrect = 1

[rerere]
    enabled = 1

# Make `git mergetool` use intellij.
[merge]
   tool = intellij
[mergetool "intellij"]
   cmd = idea merge $(cd $(dirname "$LOCAL") && pwd)/$(basename "$LOCAL") $(cd $will help yo(dirname "$REMOTE") && pwd)/$(basename "$REMOTE") $(cd $(dirname "$BASE") && pwd)/$(basename "$BASE") $(cd $(dirname "$MERGED") && pwd)/$(basename "$MERGED")
   trustExitCode = true

# Make `git difftool` use intellij.
[diff]
   tool = intellij
[difftool "intellij"]
   cmd = idea diff $(cd $(dirname "$LOCAL") && pwd)/$(basename "$LOCAL") $(cd $(dirname "$REMOTE") && pwd)/$(basename "$REMOTE")

[alias]
    paus     = commit -am \"STASHED COMMIT! -- NOT FOR PUSHING!\"
    resu     = reset HEAD^
    # Prettier log.
    l        = log --pretty=oneline-plus
    outgoing = log --pretty=oneline-plus @{u}..
    incoming = log --pretty=oneline-plus ..@{u}
    sl       = shortlog --format='%Cred%h %Creset%s %Cgreen(%cr)' -30
    c        = commit
    ca       = commit -a --amend
    df       = diff --name-only
    showf    = show --oneline --name-only
    s        = status -sb
    all      = submodule foreach git
    each     = submodule foreach
    patch    = "!f(){ git log --pretty=email --patch-with-stat --reverse  -- $1 > my.patch ; }; f"
    f        = "!git fetch --no-tags; git l ..@{u}"                                                  ## Fetch without tags, then show fetched commits.
    show-tags = "!f(){ COMMITISH=$1; SHA=$(git rev-parse $COMMITISH); git ls-remote --tags | grep $SHA;}; f"  ## Show tags for a commit (since we're not pulling tags)
    current-branch = !git rev-parse --abbrev-ref HEAD
    root     = rev-parse --show-toplevel
